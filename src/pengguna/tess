import React, { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import axios from 'axios';

const KursusDetail = () => {
  const { id_course } = useParams();
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [course, setCourse] = useState(null);
  const [showSpoiler, setShowSpoiler] = useState(false);

  useEffect(() => {
    const fetchCourseData = async () => {
      try {
        const response = await axios.get(`/api/pengguna/courses/willpay/${id_course}`);
        setCourse(response.data);
        console.log(response.data);
      } catch (err) {
        setError(err.response?.data?.error || 'Terjadi kesalahan saat mengambil data');
      } finally {
        setLoading(false);
      }
    };

    fetchCourseData();
  }, [id_course]);

  if (loading)
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-16 w-16 border-t-4 border-green-500"></div>
      </div>
    );
  if (error)
    return <div className="text-center mt-8 text-xl text-red-500">{error}</div>;
  if (!course)
    return (
      <div className="text-center mt-8 text-xl text-red-500">
        Kelas tidak ditemukan.
      </div>
    );

  const handlePayment = () => {
    const token = getToken();
    fetch(`/api/pengguna/transactions/pay-course`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${token}`,
      },
      body: JSON.stringify({ id_course }),
    })
      .then((response) => response.json())
      .then((data) => {
        window.location.href = data.redirect_url;
      })
      .catch((error) => console.error(error));
  };

  const handleJoinCourse = () => {
    const token = getToken();
    fetch(`/api/pengguna/transactions/join-course`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${token}`,
      },
      body: JSON.stringify({ id_course }),
    })
      .then((response) => response.json())
      .then(() => {
        window.location.href = `/pengguna/kursus/${id_course}`;
      })
      .catch((error) => console.error(error));
  };

  const getToken = () => {
    const match = document.cookie.match(/(^|;)\s*token\s*=\s*([^;]+)/);
    return match ? match[2] : null;
  };

  return (
    <>
      {/* Kursus Section */}
      <section className="relative w-full px-4 py-16 md:px-8 md:py-20 bg-[#E6EFDF]">
        <div className="container mx-auto px-4 mt-9 max-w-6xl">
          <div className="grid md:grid-cols-2 gap-12 items-center">
            {/* Gambar Kursus */}
            <div className="relative">
              <img
                src={`/api/${course.image_url}`}
                alt={course.course_title}
                className="w-full h-80 object-cover rounded-lg shadow-lg transform hover:scale-105 transition duration-500"
              />
              <div className="absolute inset-0 bg-black bg-opacity-30 rounded-lg transition-opacity duration-300 hover:opacity-0"></div>
            </div>
            {/* Detail Kursus */}
            <div className="text-black">
              <h1 className="text-5xl font-extrabold mb-2 leading-tight">
                {course.course_title}
              </h1>

              {/* Menampilkan jumlah peserta dengan tampilan menarik */}
              <div className="flex items-center space-x-2 mb-4">
                {/* Badge untuk jumlah peserta */}
                <div className="flex items-center bg-green-200 text-gray-700 font-medium px-4 py-2 rounded-full shadow-md transform hover:scale-110 transition duration-300">
                  <svg
                    className="w-5 h-5 mr-2 text-green-500"
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                    strokeWidth={2}
                  >
                    <path strokeLinecap="round" strokeLinejoin="round" d="M16 21v-2a4 4 0 00-4-4 4 4 0 00-4 4v2m6-6a6 6 0 016 6m-6-6a6 6 0 00-6 6" />
                  </svg>
                  <span>{Array.isArray(course.joined_users) ? course.joined_users.length : 0} peserta</span>
                </div>
              </div>

              {/* Bagian Harga & Tombol Gabung Sejajar */}
              <div className="flex items-center mb-8 space-x-4 mt-8">
                {/* Menampilkan harga seperti tombol */}
                <div
                  style={{ borderRadius: '10px' }}
                  className="bg-white text-[#84D68E] font-bold px-10 py-4 shadow-lg flex items-center justify-center transition hover:bg-gray-200"
                >
                  {course.paid === false ? 'Gratis' : `Rp ${course.price}`}
                </div>

                {/* Tombol untuk mendaftar atau membeli */}
                <button
                  style={{ borderRadius: '10px' }}
                  className="bg-[#84D68E] text-white font-bold px-10 py-4 shadow-lg hover:shadow-2xl transition duration-300 transform hover:scale-110"
                  onClick={() =>
                    course.paid ? handlePayment() : handleJoinCourse()
                  }
                >
                  {course.paid ? 'Bayar Sekarang' : 'Gabung Kelas'}
                </button>
              </div>
            </div>
          </div>
        </div>
      </section>
    </>
  );
};

export default KursusDetail;
